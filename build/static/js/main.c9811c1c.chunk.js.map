{"version":3,"sources":["ListContacts.js","ImageInput.js","CreateContact.js","App.js","index.js","registerServiceWorker.js"],"names":["ListContacts","state","query","updateQuery","_this","setState","trim","clearQuery","showingContacts","_this2","this","_this$props","props","contacts","onDeleteContact","match","RegExp","escapeRegExp","filter","contact","test","name","length","sort","sortBy","react_default","a","createElement","className","type","placeholder","value","onChange","event","target","Link","to","onClick","map","key","id","style","backgroundImage","concat","avatarURL","email","Component","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","handleFileChange","files","then","originalURL","url","handleFormReset","document","fileInput","form","addEventListener","removeEventListener","position","backgroundRepeat","backgroundPosition","backgroundSize","ref","node","top","left","opacity","React","CreateContact","handleSubmit","e","preventDefault","console","log","values","serializeForm","hash","split","toLowerCase","onCreateContact","onSubmit","src_ImageInput","App","removeContact","requestOptions","method","headers","Content-Type","Authorization","body","JSON","stringify","fetch","response","json","data","_this3","_this4","Route","exact","path","render","src_ListContacts","_ref","history","src_CreateContact","createContact","push","ReactDOM","BrowserRouter","src_App","getElementById","navigator","window","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.c9811c1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport sortBy from 'sort-by'\r\n\r\nclass ListContacts extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired\r\n  }\r\n\r\n  state = {\r\n    query: ''\r\n  }\r\n\r\n  updateQuery = (query) => {\r\n    this.setState({ query: query.trim() })\r\n  }\r\n\r\n  clearQuery = () => {\r\n    this.setState({ query: '' })\r\n  }\r\n\r\n  render() {\r\n    const { contacts, onDeleteContact } = this.props\r\n    const { query } = this.state\r\n\r\n    let showingContacts\r\n    if (query) {\r\n      const match = new RegExp(escapeRegExp(query), 'i')\r\n      showingContacts = contacts.filter((contact) => match.test(contact.name))\r\n    } else {\r\n      showingContacts = contacts\r\n    }\r\n\r\n    if(showingContacts.length !== 0){\r\n      showingContacts.sort(sortBy('name'))\r\n    }\r\n\r\n    return (\r\n      <div className='list-contacts'>\r\n        <div className='list-contacts-top'>\r\n          <input\r\n            className='search-contacts'\r\n            type='text'\r\n            placeholder='Search contacts'\r\n            value={query}\r\n            onChange={(event) => this.updateQuery(event.target.value)}\r\n          />\r\n          <Link\r\n            to='/create'\r\n            className='add-contact'\r\n          >Add Contact</Link>\r\n        </div>\r\n\r\n        {showingContacts.length !== contacts.length && (\r\n          <div className='showing-contacts'>\r\n            <span>Now showing {showingContacts.length} of {contacts.length} total</span>\r\n            <button onClick={this.clearQuery}>Show all</button>\r\n          </div>\r\n        )}\r\n\r\n        <ol className='contact-list'>\r\n          {showingContacts.map((contact) => (\r\n            <li key={contact.id} className='contact-list-item'>\r\n              <div className='contact-avatar' style={{\r\n                backgroundImage: `url(${contact.avatarURL})`\r\n              }}/>\r\n              <div className='contact-details'>\r\n                <p>{contact.name}</p>\r\n                <p>{contact.email}</p>\r\n              </div>\r\n              <button onClick={() => onDeleteContact(contact)} className='contact-remove'>\r\n                Remove\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListContacts\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst readFileAsDataURL = (file) =>\r\n  new Promise(resolve => {\r\n    const reader = new FileReader()\r\n\r\n    reader.onload = (event) => {\r\n      resolve(event.target.result)\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n  })\r\n\r\nconst resizeImage = (imageURL, canvas, maxHeight) =>\r\n  new Promise(resolve => {\r\n    const image = new Image()\r\n\r\n    image.onload = () => {\r\n      const context = canvas.getContext('2d')\r\n\r\n      if (image.height > maxHeight) {\r\n        image.width *= maxHeight / image.height\r\n        image.height = maxHeight\r\n      }\r\n\r\n      context.clearRect(0, 0, canvas.width, canvas.height)\r\n      canvas.width = image.width\r\n      canvas.height = image.height\r\n\r\n      context.drawImage(image, 0, 0, image.width, image.height)\r\n\r\n      resolve(canvas.toDataURL('image/jpeg'))\r\n    }\r\n\r\n    image.src = imageURL\r\n  })\r\n\r\n/**\r\n * A custom <input> that dynamically reads and resizes image files before\r\n * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n */\r\nclass ImageInput extends React.Component {\r\n  static propTypes = {\r\n    className: PropTypes.string,\r\n    name: PropTypes.string,\r\n    maxHeight: PropTypes.number\r\n  }\r\n\r\n  state = {\r\n    value: ''\r\n  }\r\n\r\n  handleFileChange = (event) => {\r\n    const file = event.target.files[0]\r\n\r\n    if (file && file.type.match(/^image\\//)) {\r\n      readFileAsDataURL(file).then(originalURL => {\r\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\r\n          this.setState({ value: url })\r\n        })\r\n      })\r\n    } else {\r\n      this.setState({ value: '' })\r\n    }\r\n  }\r\n\r\n  handleFormReset = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = document.createElement('canvas')\r\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\r\n  }\r\n\r\n  render() {\r\n    const { className, name } = this.props\r\n    const { value } = this.state\r\n\r\n    const style = {\r\n      position: 'relative'\r\n    }\r\n\r\n    if (value) {\r\n      style.backgroundImage = `url(\"${value}\")`\r\n      style.backgroundRepeat = 'no-repeat'\r\n      style.backgroundPosition = 'center'\r\n      style.backgroundSize = 'cover'\r\n    }\r\n\r\n    return (\r\n      <div className={className} style={style}>\r\n        <input type=\"hidden\" name={name} value={value} />\r\n        <input\r\n          ref={node => this.fileInput = node}\r\n          type=\"file\"\r\n          onChange={this.handleFileChange}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            opacity: 0\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImageInput\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport ImageInput from './ImageInput'\r\nimport serializeForm from 'form-serialize'\r\n\r\nclass CreateContact extends Component {\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    console.log(e)\r\n    const values = serializeForm(e.target, { hash: true })\r\n    var result = {}\r\n    result.id = values.name.split(\" \")[0].toLowerCase();\r\n    result.avatarURL = values.avatarURL\r\n    result.name = values.name\r\n    result.email = values.email\r\n    if (this.props.onCreateContact)\r\n      this.props.onCreateContact(result)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link className='close-create-contact' to='/'>Close</Link>\r\n        <form onSubmit={this.handleSubmit} className='create-contact-form'>\r\n          <ImageInput\r\n            className='create-contact-avatar-input'\r\n            name='avatarURL'\r\n            maxHeight={64}\r\n          />\r\n          <div className='create-contact-details'>\r\n            <input type='text' name='name' placeholder='Name'/>\r\n            <input type='text' name='email' placeholder='Email'/>\r\n            <button>Add Contact</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CreateContact\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport ListContacts from './ListContacts'\r\nimport CreateContact from './CreateContact'\r\n\r\nclass App extends Component {\r\n  state = {contacts : []}\r\n  \r\n  componentDidMount() {\r\n    fetch(\"https://contacts-directory-server.herokuapp.com/contacts\", { headers: { 'Authorization': 'devyadav' }})\r\n    .then(response => response.json())\r\n    .then(data => this.setState({\r\n      contacts: data.contacts\r\n    }));\r\n  }\r\n\r\n  removeContact = (contact) => {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json', 'Authorization': 'devyadav' },\r\n        body: JSON.stringify(contact)\r\n    };\r\n    console.log(requestOptions)\r\n    fetch('https://contacts-directory-server.herokuapp.com/contacts/'+contact.id, requestOptions)\r\n    .then(response => response.json())\r\n    .then(data => this.setState({\r\n      contacts: data.contacts\r\n    }));\r\n  }\r\n\r\n  createContact(contact) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json', 'Authorization': 'devyadav' },\r\n        body: JSON.stringify(contact)\r\n    };\r\n    console.log(requestOptions)\r\n    fetch('https://contacts-directory-server.herokuapp.com/contacts', requestOptions)\r\n    .then(response => response.json())\r\n    .then(data => this.setState({\r\n      contacts: data.contacts\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Route exact path='/' render={() => (\r\n          <ListContacts\r\n            onDeleteContact={this.removeContact}\r\n            contacts={this.state.contacts}\r\n          />\r\n        )}/>\r\n        <Route path='/create' render={({ history }) => (\r\n          <CreateContact\r\n            onCreateContact={(contact) => {\r\n              this.createContact(contact)\r\n              history.push('/')\r\n            }}\r\n          />\r\n        )}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter><App /></BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}